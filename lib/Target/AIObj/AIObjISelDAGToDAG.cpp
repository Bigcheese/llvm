//===-- AIObjISelDAGToDAG.cpp - A dag to dag inst selector for AIObj ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AIOBJ target.
//
//===----------------------------------------------------------------------===//

#include "AIObjTargetMachine.h"
#include "llvm/Intrinsics.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// AIObjDAGToDAGISel - AIOBJ specific code to select AIOBJ machine
/// instructions for SelectionDAG operations.
///
namespace {
class AIObjDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the AIObj Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const AIObjSubtarget &Subtarget;
  AIObjTargetMachine& TM;
public:
  explicit AIObjDAGToDAGISel(AIObjTargetMachine &tm)
    : SelectionDAGISel(tm),
      Subtarget(tm.getSubtarget<AIObjSubtarget>()),
      TM(tm) {
  }

  SDNode *Select(SDNode *N);

  virtual const char *getPassName() const {
    return "AIOBJ DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "AIObjGenDAGISel.inc"
};
}  // end anonymous namespace

SDNode *AIObjDAGToDAGISel::Select(SDNode *N) {
  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: ");
  DEBUG(N->dump(CurDAG));
  DEBUG(errs() << "\n");

  return SelectCode(N);
}

/// createAIObjISelDag - This pass converts a legalized DAG into a
/// AIOBJ-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createAIObjISelDag(AIObjTargetMachine &TM) {
  return new AIObjDAGToDAGISel(TM);
}
